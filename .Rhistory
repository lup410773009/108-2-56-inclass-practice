str_extract(differentMajors,"不?動?")
realEstateRegex <- str_extract(differentMajors,"不?動?")
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- str_extract(differentMajors,"不?動?")
str_replace(differentMajors,realEstateRegex,"不動系")->differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- str_extract(differentMajors,"不?動?")
realEstateRegex <- str_extract(differentMajors,"不?動?系")
realEstateRegex <- str_extract(differentMajors,"不?動?系?")
realEstateRegex <- str_extract(differentMajors,"不?動?")
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- str_extract(differentMajors,"不?動?系")
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- str_extract(differentMajors,"不?動?系?")
str_replace(differentMajors,realEstateRegex,"不動系")
str_replace(differentMajors,realEstateRegex,"不動系") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- "不動產與城鄉環境學系"
class(realEstateRegex)
length(realEstateRegex)
realEstateRegex <- str_extract(differentMajors,"不?動?系?")
str_replace(differentMajors,realEstateRegex,"不動系") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
as.factor(differentMajors) -> differentMajors
currentLevels <-levels(differentMajors)
pick6_8<-studentHeights$`年齡層`=="6-8"
mean(studentHeights$`平均身高`[pick6_8])
pick9_12<-studentHeights$`年齡層`=="9-12"
mean(studentHeights$`平均身高`[pick9_12])
pick13_15<-studentHeights$`年齡層`=="13-15"
mean(studentHeights$`平均身高`[pick13_15])
# averageHeightByGroup
boys<-studentHeights$`類別`=="男"
girls<-studentHeights$`類別`=="女"
mean(studentHeights$`平均身高`[pick6_8&boys])->boysA
mean(studentHeights$`平均身高`[pick6_8&girls])->girlsA
mean(studentHeights$`平均身高`[pick9_12&boys])->boysB
mean(studentHeights$`平均身高`[pick9_12&girls])->girlsB
mean(studentHeights$`平均身高`[pick13_15&boys])->boysC
mean(studentHeights$`平均身高`[pick13_15&girls])->girlsC
heightDifferenceByGroup<-c(boysA-girlsA,boysB-girlsB,boysC-girlsC)
heightDifferenceByGroup
# heightDifferenceByGroup
bSchoolRegex<-"休閒與運動管理學系|休運系|金融與合作經營學系|金融系|金融與合作學系"
# bSchoolRegex
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
print(studentHeights)
studentHeights$`學年度` <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
studentHeights$`學年度`
studentHeights$`年齡` <-
factor(
studentHeights$`年齡`,
ordered=TRUE
)
levels(studentHeights$`年齡`)
studentHeights$`年齡`
#semesterranking<- sort(`學年度`)
# studentHeight
studentHeight
str(studentHeights)
studentHeights$`學年度` <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
studentHeights$`學年度`
studentHeights$`年齡` <-
factor(
studentHeights$`年齡`,
ordered=TRUE
)
levels(studentHeights$`年齡`)
studentHeights$`年齡`
#semesterranking<- sort(`學年度`)
str(studentHeights)
studentHeights$`學年度` <-
factor(
studentHeights$`學年度`,
ordered=TRUE
)
studentHeights$`學年度`
studentHeights$`年齡` <-
factor(
studentHeights$`年齡`,
ordered=TRUE
)
levels(studentHeights$`年齡`)
studentHeights$`年齡`
#semesterranking<- sort(`學年度`)
str(studentHeights)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
str(studentHeights)
studentHeights$`學年度` <- factor(studentHeights$`學年度`,ordered =T)
`學年度` <- levels(studentHeights$`學年度`)
a <- str_extract(`學年度`,"[0-9]+")
a <- as.integer(a)
names(a) <- `學年度`
sort(a) -> a
studentHeights$`學年度` <-
factor(studentHeights$`學年度`,names(a),ordered = T)
levels(studentHeights$`學年度`)
studentHeights$`年齡` <- factor(studentHeights$`年齡`,ordered =T)
`年齡` <- levels(studentHeights$`年齡`)
b <- str_extract(`年齡`,"[0-9]+")
b <- as.integer(b)
names(b) <- `年齡`
sort(b) -> b
studentHeights$`年齡` <-
factor(studentHeights$`年齡`,names(b),ordered = T)
levels(studentHeights$`年齡`)
str(studentHeights)
studentHeights
studentHeights$`年齡層` <- factor(studentHeights$`年齡層`,ordered =T)
`年齡層` <- levels(studentHeights$`年齡層`)
c <- str_extract(`年齡層`,"^[0-9]+")
c <- as.integer(c)
names(c) <- `年齡層`
sort(c) -> c
studentHeights$`年齡層` <-
factor(studentHeights$`年齡層`,names(c),ordered = T)
levels(studentHeights$`年齡層`)
str(studentHeights$`年齡層`)
# studentHeights$`年齡層`
averageHeightByGroup <-(pick6_8,pick9_12,pick13_15)
averageHeightByGroup <-as.character.numeric_version(pick6_8,pick9_12,pick13_15)
m1 <- mean(studentHeights$`平均身高`[pick6_8])
m2 <- pick9_12<-studentHeights$`年齡層`=="9-12"
m3 <-mean(studentHeights$`平均身高`[pick9_12])
m1 <- mean(studentHeights$`平均身高`[pick6_8])
pick6_8<-studentHeights$`年齡層`=="6-8"
m1 <- mean(studentHeights$`平均身高`[pick6_8])
pick9_12<-studentHeights$`年齡層`=="9-12"
m2 <- mean(studentHeights$`平均身高`[pick9_12])
pick13_15<-studentHeights$`年齡層`=="13-15"
m3 <- mean(studentHeights$`平均身高`[pick13_15])
averageHeightByGroup <-(m1,m2,m3)
averageHeightByGroup <-(m1,m2,m3)
averageHeightByGroup <-as.character(m1,m2,m3)
str(m1)
averageHeightByGroup <-paste0(m1,m2,m3)
averageHeightByGroup <-as.numeric(m1,m2,m3)
averageHeightByGroup <-as.numeric_version(m1,m2,m3)
averageHeightByGroup <-as.numeric(m1,m2,m3)
averageHeightByGroup <-as.numeric(as.character(m1,m2,m3))
averageHeightByGroup <-as.character(m1,m2,m3))
averageHeightByGroup <-as.character(m1,m2,m3)
averageHeightByGroup <-as.character.default(m1,m2,m3)
averageHeightByGroup <-[m1,m2,m3]
averageHeightByGroup <-	as.vector(m1,m2,m3)
averageHeightByGroup <-	as.vector(m1)
averageHeightByGroup <-	as.vector(m1,m2)
averageHeightByGroup <-	c(m1,m2,m3)
pick6_8<-studentHeights$`年齡層`=="6-8"
m1 <- mean(studentHeights$`平均身高`[pick6_8])
pick9_12<-studentHeights$`年齡層`=="9-12"
m2 <- mean(studentHeights$`平均身高`[pick9_12])
pick13_15<-studentHeights$`年齡層`=="13-15"
m3 <- mean(studentHeights$`平均身高`[pick13_15])
str(m1)
averageHeightByGroup <-	c(m1,m2,m3)
library(purrr)
library(purrr)
install.packages(purrr)
install.packages("purrr")
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example,~x.[pick_小新]) -> data_selected2
View(data_selected)
map(example,~.x[pick_小新]) -> data_selected2
View(data_selected2)
View(data_selected)
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
birthday=example$birthday[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example,~.x[pick_小新]) -> data_selected2
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
data_selected == data_selected2
unlist(data_selected) == unlist(data_selected2)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
height=example$height[pick_小新],
weight=example$weight[pick_小新],
hobby=example$hobby[pick_小新],
birthday=example$birthday[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example,~.x[pick_小新]) -> data_selected2
unlist(data_selected) == unlist(data_selected2)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
height=example$height[pick_小新],
weight=example$weight[pick_小新],
birthday=example$birthday[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example,~.x[pick_小新]) -> data_selected2
unlist(data_selected) == unlist(data_selected2)
View(data_selected)
map(dance,~.x$title) -> list_title
View(list_title)
table(list_title)
View(list_title)
View(dance)
map(dance,~.x$showInfo) -> list_showInfo
View(list_showInfo)
map(dance[[1]],~.x$showInfo) -> list_showInfo
map(dance,~.x$showInfo) -> list_showInfo
map(dance,~lenth(.x$showInfo)) -> list_showInfo
map(dance,~length(.x$showInfo)) -> list_showInfo
View(list_showInfo)
View(dance)
dance[[4]]$showInfo
str(dance[[4]]$showInfo)
str(dance[[4]]$showInfo,max.level = 1)
dance[[4]]$showInfo[[1]]$time
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo,~.x$time)
map(dance[[4]]$showInfo,~.x$time)->list_forth_time
View(list_forth_time)
View(dance)
num <- c(2,5,7)
map(num.~.x+3)
map(num,~.x+3)
map(num,~.x+3) -> num1
unlist(map(num,~.x+3)) -> num1
load("~/.RData")
return(q_d)
demand <-
function(p)
return(q_d)
demand(1.2)
demand <-
function(p)
{q_d <- 10-5*p }
return(q_d)
demand <-
function(p)
demand <-
function(p)
{q_d <- 10-5*p }
return(q_d)
return(q_d)
return(q_d)}
demand <-
function(p)
demand <-
function(p)
{q_d <- 10-5*p
return(q_d)}
demand(1.2)
demand <-
function(p)
demand <-
function(p)
{q_d <- 10-5*p
return(q_d)}
demand(1.2)
return(q_d)}
demand <-
function(p)
{q_d <- 10-5*p}
return(q_d)
return(q_d)
return(q_d)}
demand <-
function(p){
q_d <- 10-5*p
return(q_d)}
demand(1.2)
demand <-
function(p)
{
q_d <- 10-5*p
return(q_d)}
demand(1.2)
demand <-
function(p){
q_d <- 10-5*p
return(q_d)}
demand(1.2)
sampleData <- list(
list("男", 45), list("女", 32), list("男",50), list("男",33), list("女", 21)
)
# 前三筆性別
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
# 前三筆性別
library(purrr)
sampleData[[1]][[1]] %>%
sampleData[[2]][[1]]
sampleData[[1]][[1]] %>% {.[[1]]}
map(sampleData,~{.x[[1]]})
map(1:5,~{sampleData[[.]][[1]]})
map(1:5,~{sampleData[[.x]][[1]]})
map(1:5,~{sampleData[[.y]][[1]]})
map(1:5,~{sampleData[[.1]][[1]]})
map(1:5,~{sampleData[[.jnhjkh]][[1]]})
map(1:5,~{sampleData[[.j]][[1]]})
map(1:5,~{sampleData[[.1]][[1]]})
map(1:5,~{sampleData[[.x]][[1]]})
map(1:5,~{sampleData[[.z]][[1]]})
map(1:5,~{sampleData[[.]][[1]]})
egg <- rep("雞蛋x1",8)
library(stringr)
fryegg <- function(egg){
str_replace(egg,"雞蛋","荷包蛋")
library(stringr)
fryegg <- function(egg){
str_replace(egg,"雞蛋","荷包蛋")
}
map(eggs,~fryEgg(.x)) -> friedEggs1
map(eggs,~fryEgg(.x)) -> friedEggs1
map(eggs,~fryegg(.x)) -> friedEggs1
map(eggs,~fryegg(.x)) -> friedeggs1
map(eggs,~fryegg(.x)) -> friedeggs1
map(eggs,~fryegg(.x)) -> friedeggs1
# 前三筆性別
library(purrr)
eggs <- rep("雞蛋x1",8)
eggs <- rep("雞蛋x1",8)
eggs <- rep("雞蛋x1",8)
eggs <- rep("雞蛋x1",8)
library(stringr)
fryegg <- function(egg){
str_replace(egg,"雞蛋","荷包蛋")
}
map(eggs,~fryegg(.x)) -> friedeggs1
eggs <- rep("雞蛋x1",8)
library(stringr)
fryegg <- function(egg){
str_replace(egg,"雞蛋","荷包蛋")
}
fryegg <- function(eggs){
str_replace(egg,"雞蛋","荷包蛋")
}
str_replace(eggs,"雞蛋","荷包蛋")
fryegg <- function(eggs){
str_replace(eggs,"雞蛋","荷包蛋")
}
map(eggs,~fryegg(.x)) -> friedeggs1
str_replace(1,"雞蛋","荷包蛋")
str_replace(eggs[[1]],"雞蛋","荷包蛋")
map(1:8,~{fryegg(eggs[[.x]])}) ->friedeggs2
View(friedeggs2)
View(friedeggs2)
grade <- c(14,94,NA)
grade_i <- grade[[i]]
i = 1
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
i = 2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
i = 3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
a<-if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
pass_or_fail<- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
}
map(1:3,~pass_or_fail(.x))
rm(i)
map(1:3,~pass_or_fail(.x))
rm(i)
map(1:3,~pass_or_fail(.x))
pass_or_fail<- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
}
grade_i <- grade[[i]]
i=1
grade_i <- grade[[i]]
pass_or_fail<- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"pass"
} else{
"fail"
}
} else {
"缺考"
}
}
grade_i
grade_i[[1]]
grade_i[[2]]
grade[[2]]
pass_or_fail(grade[[2]])
pass_or_fail(grade)
pass_or_fail(grade[[1:3]])
pass_or_fail(grade[[1]])
map(grade,~pass_or_fail(.x))
map(grade,~pass_or_fail(1))
map(grade,~pass_or_fail(2))
map(grade,~pass_or_fail(.x))
map(grade,~pass_or_fail(3))
map(grade,~pass_or_fail(4))
map(grade,~pass_or_fail(5))
map(grade,~pass_or_fail(54535))
map(grade,~pass_or_fail(54535455))
map(grade,~pass_or_fail(5453545544444))
map(grade,~pass_or_fail(5544444))
map(grade,~pass_or_fail(200))
map(grade,~pass_or_fail(10))
map(grade,~pass_or_fail(60))
map(grade,~pass_or_fail(59))
map(grade,~pass_or_fail(59.5))
map(grade,~pass_or_fail(.x))
map(grade,~{pass_or_fail(.x)})
map_chr(grade,~{pass_or_fail(.x)})
map_chr(grade,~{pass_or_fail(.x)})
map_pass_fail <- function(grade){
map_chr(grade,~{pass_or_fail(.x)})
}
map_pass_fail(1)
map_pass_fail(2)
map_pass_fail(grade)
map_pass_fail(c(10,50,64,NA))
map_pass_fail(c(1:100))
