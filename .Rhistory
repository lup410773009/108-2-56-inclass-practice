pick_afternoonRouteS <-
stringr::str_detect(garbageRoutes$linename,"下午")
garbageRoutes$linename[pick_afternoonRouteS]
library(stringr)
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$") ==
!str_detect(fruit, "a$", negate = T)
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
example$name[
pick_loveFood & pick_bloodB
]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
library(stringr)
library(glue)
library(stringr)
library(glue)
str_sub("410773009",5,6)
str_sub("410773009",5)
str_sub("410773009",5,6)
str_sub("410773009",5,5)
str_sub("410773009",5,6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
(pal <- make.rgb(red =   c(0.6400, 0.3300),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
(pal <- make.rgb(red =   c(0.6400, 0.3300),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
View(pal)
(pal <- make.rgb(red =   c(0.6400, 0.5000),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
(pal <- make.rgb(red =   c(0.6400, 0.5000),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
(pal <- make.rgb(red =   c(0.6400, 1.5000),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
(pal <- make.rgb(red =   c(0.6400, 1.5000),
green = c(0.2900, 0.6000),
blue =  c(0.1500, 0.0600),
name = "PAL/SECAM RGB"))
View(pal)
rm(pal)
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
install.packages("gapminder")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
str_view_all(Ids, "[AC]")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_view_all(Ids, "[AC]")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]2號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
str_extract(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]號"
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]1號"
str_extract(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]2號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]3號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "2[0-9]號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]號"
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
`20200429` <- read.table("~/GitHub/108-2-56-inclass-practice/20200429.Rmd", header=TRUE, quote="\"")
View(`20200429`)
load("~/GitHub/108-2-56-inclass-practice/20200429.Rmd")
load("~/GitHub/108-2-56-inclass-practice/20200429.Rmd")
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro &
pick_bloodB
]
pick_after98 & pick_fromTaipeiMetro &
+   pick_bloodB
library(glue)
library(stringr)
str_sub(c("410773009","4108773009"),5,6)
str_sub(c("410773009","410873009"),5,6)
lubridate::ymd(
c("108.2.5")
)
lubridate::ymd(
c("108.12.5")
)
lubridate::ymd(
c("99.12.5")
)
lubridate::ymd(
c("109.12.5")
)
lubridate::ymd(
c("19.12.5")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1'
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1'
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1'
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1'
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
c(2,3)/c(2,3,10)
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
c(2,3)/c(2,3,10)
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
c(2,3)/c(2,3,10)
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro &
pick_bloodB
]
library(stringr)
library(glue)
str_sub(c("410773009","410873009"),5,6)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
library(jsonlite)
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
str_view_all(heartSutra,"色") # 檢視
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
str_view_all(heartSutra,"異色")
str_view_all(heartSutra,"異色")
str_view_all(heartSutra,"色") # 檢視
str_view_all(heartSutra,"色") # 檢視
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
str_detect(studentIds, "107|108")
str_view_all(studentIds, "107|108") # 可不寫()
studentIds <- c("410873029","410773005","410772035","410562123","4106107108")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
str_view_all(studentIds,"(107|108)")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_view_all(Ids, "[AC]")
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
